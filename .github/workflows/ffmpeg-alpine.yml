name: FFmpeg Alpine

on:
  push:
    tags: [ 'ffmpeg-alpine-v*.*.*' ]
    paths:
      - 'app/ffmpeg/alpine'

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      git_tag: ${{ steps.git_info.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: set-matrix
        run: |
          JSON=$(cat .github/workflows/repo-setting.json | tr '\n' ' ' | sed 's/ //g')
          echo "::set-output name=matrix::$JSON"

      - id: git_info
        run: |
          tag=$(echo ${{ github.ref }} | rev | cut -d/ -f1 | rev)
          echo "::set-output name=tag::$tag"

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/ffmpeg/alpine
    needs: [ set-matrix ]
    strategy:
      matrix:
        platforms: [ amd64, arm64 ]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build ${{ matrix.platforms }}
        run: |
          platform=$(o=linux && p=${{ matrix.platforms }} && echo \*.platform=$o/$p)
          REPO=hominsu VERSION=${{ needs.set-matrix.outputs.git_tag }} docker buildx bake --file docker-bake.hcl --load --set "*.cache-to=type=gha,mode=max" --set "*.cache-from=type=gha" --set "$platform" ffmpeg-alpine-deps ffmpeg-alpine-devel ffmpeg-alpine-runtime
          REPO=ghcr.io/hominsu VERSION=${{ needs.set-matrix.outputs.git_tag }} docker buildx bake --file docker-bake.hcl --load --set "*.cache-to=type=gha,mode=max" --set "*.cache-from=type=gha" --set "$platform" ffmpeg-alpine-deps ffmpeg-alpine-devel ffmpeg-alpine-runtime

      - name: Save ${{ matrix.platforms }} images
        run: |
          DIR=${{ github.workspace }}/artifact
          mkdir -p $DIR
          FIND_FLAG=${{ github.actor }}/ffmpeg-alpine
          docker images | grep $FIND_FLAG | awk -v platform=${{ matrix.platforms }} '{ print "docker tag "$1":"$2" "$1":"$2"-"platform" && docker rmi "$1":"$2}' | sh
          docker images | grep $FIND_FLAG | awk -v dir=$DIR '{ filename=$1"-"$2; gsub(/\//,"-",filename); print "docker save "$1":"$2" -o "dir"/"filename".tar"}' | sh
          docker images | grep $FIND_FLAG | awk '{ print $1":"$2 }' | xargs docker rmi

      - name: Upload ${{ matrix.platforms }} images
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-alpine-${{ matrix.platforms }}-artifact
          path: ${{ github.workspace }}/artifact
          if-no-files-found: error

  build-alpine:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/ffmpeg/alpine
    needs: [ set-matrix ]
    strategy:
      matrix:
        platforms: [ amd64, arm64 ]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build ${{ matrix.platforms }}
        run: |
          platform=$(o=linux && p=${{ matrix.platforms }} && echo \*.platform=$o/$p)
          REPO=hominsu VERSION=${{ needs.set-matrix.outputs.git_tag }} docker buildx bake --file docker-bake.hcl --load --set "*.cache-to=type=gha,mode=max" --set "*.cache-from=type=gha" --set "$platform" ffmpeg-alpine-alpine
          REPO=ghcr.io/hominsu VERSION=${{ needs.set-matrix.outputs.git_tag }} docker buildx bake --file docker-bake.hcl --load --set "*.cache-to=type=gha,mode=max" --set "*.cache-from=type=gha" --set "$platform" ffmpeg-alpine-alpine

      - name: Save ${{ matrix.platforms }} images
        run: |
          DIR=${{ github.workspace }}/artifact
          mkdir -p $DIR
          FIND_FLAG=${{ github.actor }}/ffmpeg-alpine
          docker images | grep $FIND_FLAG | awk -v platform=${{ matrix.platforms }} '{ print "docker tag "$1":"$2" "$1":"$2"-"platform" && docker rmi "$1":"$2}' | sh
          docker images | grep $FIND_FLAG | awk -v dir=$DIR '{ filename=$1"-"$2; gsub(/\//,"-",filename); print "docker save "$1":"$2" -o "dir"/"filename".tar"}' | sh
          docker images | grep $FIND_FLAG | awk '{ print $1":"$2 }' | xargs docker rmi

      - name: Upload ${{ matrix.platforms }} images
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-alpine-alpine-${{ matrix.platforms }}-artifact
          path: ${{ github.workspace }}/artifact
          if-no-files-found: error

  push:
    name: Push
    runs-on: ubuntu-latest
    needs: [ build, build-alpine ]

    steps:
      - name: Log into registry Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log into registry Ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/artifact

      - name: Load images
        run: |
          find $(pwd) | grep ".tar" | xargs ls -ld | awk 'NF>8{print $NF}' | awk '{print "docker load -i "$1}' | sh
          
      - name: Push image manifests
        run: |
          FIND_FLAG=${{ github.actor }}/ffmpeg-alpine
          docker images | grep $FIND_FLAG | awk '{ print "docker push "$1":"$2 }' | sh
          docker images | grep $FIND_FLAG | awk '{ gsub(/-(386|s390x|(a(?:md|rm)|mips|riscv|ppc)64([le]{0,2})|arm\/v[6-7])/, "", $2); if(!a[$1$2]++){ print $1; print $2 } }' | xargs -L 2 bash -c 'docker images | awk -v name="$0" -v tag="$1" "{ if(\$1 != name || !match(\$2, tag)){next}; if(!a[name\":\"tag]++){print name\":\"tag}; print \$1\":\"\$2 }" | xargs docker manifest create'
          docker images | grep $FIND_FLAG | awk '{ gsub(/-(386|s390x|(a(?:md|rm)|mips|riscv|ppc)64([le]{0,2})|arm\/v[6-7])/, "", $2); if(!a[$1$2]++){ print $1; print $2 } }' | xargs -L 2 bash -c 'docker images | awk -v name="$0" -v tag="$1" "{ if(\$1 != name || !match(\$2, tag)){next}; if(!a[name\":\"tag]++){print name\":\"tag} }" | xargs docker manifest push'
          docker images | grep $FIND_FLAG | awk '{ gsub(/-(386|s390x|(a(?:md|rm)|mips|riscv|ppc)64([le]{0,2})|arm\/v[6-7])/, "", $2); if(!a[$1$2]++){ print $1; print $2 } }' | xargs -L 2 bash -c 'docker images | awk -v name="$0" -v tag="$1" "{ if(\$1 != name || !match(\$2, tag)){next}; if(!a[name\":\"tag]++){print name\":\"tag} }" | xargs docker manifest rm'
          docker images | grep $FIND_FLAG | awk '{ print $1":"$2 }' | xargs docker rmi

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ push ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Changelog
        run: |
          current_tag=$(git tag -l --format "%(refname:strip=2)" --sort=taggerdate | sed -n '$p')
          last_tag=$(git tag -l --format "%(refname:strip=2)" --sort=taggerdate | sed -e '$d' | sed -n '$p')
          git log --pretty=oneline --pretty=format:"%s%n%b" $last_tag...$current_tag > ${{ github.workspace }}-CHANGELOG.txt

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          generate_release_notes: true